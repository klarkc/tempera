{"version":3,"sources":["../src/index.js"],"names":["getConfig","tokens","extend","mustMatch","Error","result","Object","entries","forEach","tokenKey","tokenValue","includes","matchingEntry","matchers","find","_","matcher","match","length","matcherKey","matcherValue","configKey","matchBeginningHyphen","matchEndingHyphen","className","replace","setting","fontSizeIndex","filter","key","findIndex","value","lineHeight","exception","split","map","x","trimStart","newConfig","theme","defaultConfig","customizer","defaultConfigValue","newConfigValue"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;AAEe,SAASA,SAAT,CAAmBC,MAAnB,EAA2B;AAAEC,EAAAA,MAAM,GAAG,KAAX;AAAkBC,EAAAA,SAAS,GAAG;AAA9B,IAAuC,EAAlE,EAAsE;AACnF,MAAI,CAAC,2BAAeF,MAAf,CAAL,EAA6B;AAC3B,UAAM,IAAIG,KAAJ,CACJ,gFADI,CAAN;AAGD;;AAED,MAAIC,MAAM,GAAG,EAAb;AAEAC,EAAAA,MAAM,CAACC,OAAP,CAAeN,MAAf,EAAuBO,OAAvB,CAA+B,CAAC,CAACC,QAAD,EAAWC,UAAX,CAAD,KAA4B;AACzD,QAAI,sBAAUD,QAAV,EAAoBE,QAApB,CAA6B,WAA7B,CAAJ,EAA+C;AAC7C,aAAO,IAAP;AACD;;AAED,QAAI,sBAAUF,QAAV,EAAoBE,QAApB,CAA6B,aAA7B,CAAJ,EAAiD;AAC/C,aAAO,IAAP;AACD;;AAED,UAAMC,aAAa,GAAGN,MAAM,CAACC,OAAP,CAAeM,QAAf,EAAyBC,IAAzB,CACpB,CAAC,CAACC,CAAD,EAAIC,OAAJ,CAAD,KAAkB;AAChB,YAAMC,KAAK,GAAG,sBAAUR,QAAV,EAAoBQ,KAApB,CAA0BD,OAA1B,CAAd;AACA,aAAOC,KAAK,IAAIA,KAAK,CAACC,MAAtB;AACD,KAJmB,CAAtB;;AAOA,QAAIf,SAAS,IAAI,CAACS,aAAlB,EAAiC;AAC/B,YAAM,IAAIR,KAAJ,CACJ,gGADI,CAAN;AAGD;;AAED,QAAI,CAACQ,aAAL,EAAoB;AAClB,aAAO,IAAP;AACD;;AAED,UAAM,CAACO,UAAD,EAAaC,YAAb,IAA6BR,aAAnC;;AACA,QAAI,CAACO,UAAL,EAAiB;AACf,aAAO,IAAP;AACD;;AAED,UAAME,SAAS,GAAG,qBAAUF,UAAV,CAAlB;AACA,UAAMG,oBAAoB,GAAG,YAA7B;AACA,UAAMC,iBAAiB,GAAG,WAA1B;AACA,UAAMC,SAAS,GAAG,sBAAUf,QAAV,EACfgB,OADe,CACPL,YADO,EACO,EADP,EAEfK,OAFe,CAEPF,iBAFO,EAEY,EAFZ,EAGfE,OAHe,CAGPH,oBAHO,EAGe,EAHf,CAAlB;AAKA,QAAII,OAAJ;;AAEA,QAAIL,SAAS,KAAK,UAAlB,EAA8B;AAC5B,YAAMM,aAAa,GAAGrB,MAAM,CAACC,OAAP,CAAeN,MAAf,EACnB2B,MADmB,CACZ,CAAC,CAACC,GAAD,CAAD,KAAW,qBAAUA,GAAV,EAAelB,QAAf,CAAwB,UAAxB,CADC,EAEnBmB,SAFmB,CAET,CAAC,CAACf,CAAD,EAAIgB,KAAJ,CAAD,KAAgB;AACzB,eAAOA,KAAK,KAAKrB,UAAjB;AACD,OAJmB,CAAtB;;AAMA,UAAI;AACF,cAAMsB,UAAU,GAAG1B,MAAM,CAACC,OAAP,CAAeN,MAAf,EAAuB2B,MAAvB,CACjB,CAAC,CAACC,GAAD,CAAD,KAAW,qBAAUA,GAAV,EAAelB,QAAf,CAAwB,YAAxB,CADM,EAEjBgB,aAFiB,EAEF,CAFE,CAAnB;AAGAD,QAAAA,OAAO,GAAG,CAAChB,UAAD,EAAa;AAAEsB,UAAAA;AAAF,SAAb,CAAV;AACD,OALD,CAMA,OAAOC,SAAP,EAAkB;AAChB,cAAM,IAAI7B,KAAJ,CAAU,6FAAV,CAAN;AACD;AACF,KAhBD,MAgBO,IAAIiB,SAAS,KAAK,YAAlB,EAAgC;AACrCK,MAAAA,OAAO,GAAGhB,UAAU,CAACwB,KAAX,CAAiB,GAAjB,EAAsBC,GAAtB,CAA0BC,CAAC,IAAIA,CAAC,CAACC,SAAF,EAA/B,CAAV;AACD,KAFM,MAEA;AACLX,MAAAA,OAAO,GAAGhB,UAAV;AACD;;AAEDL,IAAAA,MAAM,GAAG,EACP,GAAGA,MADI;AAEP,OAACgB,SAAD,GAAa,EACX,GAAGhB,MAAM,CAACgB,SAAD,CADE;AAEX,SAACG,SAAD,GAAaE;AAFF;AAFN,KAAT;AAOD,GAtED;AAwEA,QAAMY,SAAS,GAAG;AAAEC,IAAAA,KAAK,EAAElC;AAAT,GAAlB;;AAEA,MAAIH,MAAJ,EAAY;AACV,WAAO,sBAAMsC,8BAAN,EAAqBF,SAArB,CAAP;AACD;;AAED,WAASG,UAAT,CAAoBC,kBAApB,EAAwCC,cAAxC,EAAwD;AACtD,QAAI,OAAOD,kBAAP,KAA8B,QAAlC,EAA4C;AAC1C,aAAOC,cAAP;AACD;AACF;;AAED,SAAO,sBAAUH,8BAAV,EAAyBF,SAAzB,EAAoCG,UAApC,CAAP;AACD","sourcesContent":["import camelCase from \"lodash.camelcase\";\nimport kebabCase from \"lodash.kebabcase\";\nimport merge from \"lodash.merge\";\nimport mergeWith from \"lodash.mergewith\";\n\nimport * as matchers from \"./matchers\";\nimport { validateTokens } from \"./utils\";\nimport defaultConfig from \"./stubs/default-tailwind-config\";\n\nexport default function getConfig(tokens, { extend = false, mustMatch = true } = {}) {\n  if (!validateTokens(tokens)) {\n    throw new Error(\n      \"Tokens are not in a valid format. A flat set of key-value modules is expected.\"\n    );\n  }\n\n  let result = {};\n\n  Object.entries(tokens).forEach(([tokenKey, tokenValue]) => {\n    if (kebabCase(tokenKey).includes(\"component\")) {\n      return null;\n    }\n\n    if (kebabCase(tokenKey).includes(\"line-height\")) {\n      return null;\n    }\n\n    const matchingEntry = Object.entries(matchers).find(\n      ([_, matcher]) => {\n        const match = kebabCase(tokenKey).match(matcher);\n        return match && match.length;\n      }\n    );\n\n    if (mustMatch && !matchingEntry) {\n      throw new Error(\n        \"Unmatched token detected, if you want to skip this error you can set mustMatch option to false\"\n      )\n    }\n\n    if (!matchingEntry) {\n      return null;\n    }\n\n    const [matcherKey, matcherValue] = matchingEntry;\n    if (!matcherKey) {\n      return null;\n    }\n\n    const configKey = camelCase(matcherKey);\n    const matchBeginningHyphen = /^-(?=\\w)/gm;\n    const matchEndingHyphen = /-(?!\\w)/gm;\n    const className = kebabCase(tokenKey)\n      .replace(matcherValue, \"\")\n      .replace(matchEndingHyphen, \"\")\n      .replace(matchBeginningHyphen, \"\");\n\n    let setting;\n\n    if (configKey === \"fontSize\") {\n      const fontSizeIndex = Object.entries(tokens)\n        .filter(([key]) => camelCase(key).includes(\"fontSize\"))\n        .findIndex(([_, value]) => {\n          return value === tokenValue;\n        });\n\n      try {\n        const lineHeight = Object.entries(tokens).filter(\n          ([key]) => camelCase(key).includes(\"lineHeight\")\n        )[fontSizeIndex][1];\n        setting = [tokenValue, { lineHeight }];\n      }\n      catch (exception) {\n        throw new Error(\"Could not find matching line height for font size. Did you include your line height tokens?\");\n      }\n    } else if (configKey === \"fontFamily\") {\n      setting = tokenValue.split(\",\").map(x => x.trimStart());\n    } else {\n      setting = tokenValue;\n    }\n\n    result = {\n      ...result,\n      [configKey]: {\n        ...result[configKey],\n        [className]: setting,\n      },\n    };\n  });\n\n  const newConfig = { theme: result };\n\n  if (extend) {\n    return merge(defaultConfig, newConfig);\n  }\n\n  function customizer(defaultConfigValue, newConfigValue) {\n    if (typeof defaultConfigValue === \"object\") {\n      return newConfigValue;\n    }\n  }\n\n  return mergeWith(defaultConfig, newConfig, customizer);\n}\n"],"file":"index.js"}